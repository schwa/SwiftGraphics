// Benchmark boilerplate generated by Benchmark

import Benchmark
import Foundation
import Shapes2D
import CoreGraphicsSupport

let benchmarks = {
    Benchmark("DeCasteljau") { benchmark in
        for _ in benchmark.scaledIterations {
            blackHole(testDeCasteljau())
        }
    }
    Benchmark("BernsteinPolynomal") { benchmark in
        for _ in benchmark.scaledIterations {
            blackHole(testBernsteinPolynomalMatrix())
        }
    }
    Benchmark("BernsteinPolynomalMatrix") { benchmark in
        for _ in benchmark.scaledIterations {
            blackHole(testBernsteinPolynomalMatrix())
        }
    }
}

func testDeCasteljau() {
    let curve = CubicBezierCurve(controlPoints: [[0, 0], [100, 0], [100, 100], [0, 100]])
    let solver = DeCasteljauBezierCurveSampler()
    for t in stride(from: 0, through: 1, by: 0.001) {
        blackHole(solver.sample_cubic(curve: curve, t: t))
    }
}

func testBernsteinPolynomal() {
    let curve = CubicBezierCurve(controlPoints: [[0, 0], [100, 0], [100, 100], [0, 100]])
    let controlPoints = curve.controlPoints
    let cpX: (Double, Double, Double, Double) = (controlPoints.0.x, controlPoints.1.x, controlPoints.2.x, controlPoints.3.x)
    let xSolver = BernsteinPolynomalCubicCurveSolver(controlPoints: cpX)
    let cpY: (Double, Double, Double, Double) = (controlPoints.0.y, controlPoints.1.y, controlPoints.2.y, controlPoints.3.y)
    let ySolver = BernsteinPolynomalCubicCurveSolver(controlPoints: cpY)
    for t in stride(from: 0, through: 1, by: 0.001) {
        blackHole(xSolver.sample_cubic(t: t))
        blackHole(ySolver.sample_cubic(t: t))
    }
}


func testBernsteinPolynomalMatrix() {
    let curve = CubicBezierCurve(controlPoints: [[0, 0], [100, 0], [100, 100], [0, 100]])
    let controlPoints = curve.controlPoints
    let cpX: (Double, Double, Double, Double) = (controlPoints.0.x, controlPoints.1.x, controlPoints.2.x, controlPoints.3.x)
    let xSolver = BernsteinPolynomalCubicCurveSolver(controlPoints: cpX)
    let cpY: (Double, Double, Double, Double) = (controlPoints.0.y, controlPoints.1.y, controlPoints.2.y, controlPoints.3.y)
    let ySolver = BernsteinPolynomalCubicCurveSolver(controlPoints: cpY)
    for t in stride(from: 0, through: 1, by: 0.001) {
        blackHole(xSolver.sample_cubic_matrix(t: t))
        blackHole(ySolver.sample_cubic_matrix(t: t))
    }

}
